This file originates at https://bitbucket.org/lindenlab/master-message-template/raw/f417ee440ed0e6e0ccfb589d6e88b37efc13af5a/message_template.msg

It belongs to Linden Labs

This version is a 'todo' or 'wishlist' form of the file, where implemented or ignored stuff is slowly stripped away leaving a list of messages I'm interested in implementing properly.


// ***************************************************************************
// Search messages
// ***************************************************************************

// AvatarPickerRequest
// Get a list of names to select a person
// viewer -> sim -> data
// reliable
{
	AvatarPickerRequest Low 26 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID		}
		{	SessionID	LLUUID		}
		{	QueryID		LLUUID		}
	}
	{
		Data			Single
		{	Name		Variable 1	}
	}
}

// AvatarPickerReply
// List of names to select a person
// reliable
{
	AvatarPickerReply Low 28 Trusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID		}
		{	QueryID		LLUUID		}
	}
	{
		Data			Variable
		{	AvatarID	LLUUID		}
		{	FirstName	Variable 1	}
		{	LastName	Variable 1	}
	}
}

// ParcelInfoRequest
// viewer -> simulator -> dataserver
// reliable
{
	ParcelInfoRequest Low 54 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID			LLUUID		}
		{	SessionID		LLUUID	}
	}
	{
		Data			Single
		{	ParcelID		LLUUID		}
	}
}

// ParcelInfoReply
// dataserver -> simulator -> viewer
// reliable
{
	ParcelInfoReply Low 55 Trusted Zerocoded
	{
		AgentData		Single
		{	AgentID			LLUUID		}
	}
	{
		Data			Single
		{	ParcelID		LLUUID			}
		{	OwnerID			LLUUID			}
		{	Name			Variable	1	}
		{	Desc			Variable	1	}
		{	ActualArea		S32				}
		{	BillableArea	S32				}
		{	Flags			U8				}
		{	GlobalX			F32				}	// meters
		{	GlobalY			F32				}	// meters
		{	GlobalZ			F32				}	// meters
		{	SimName			Variable	1	}
		{	SnapshotID		LLUUID			}
		{	Dwell			F32				}
		{	SalePrice		S32				}
		{	AuctionID		S32				}
	}
}


// ParcelObjectOwnersRequest
// viewer -> simulator
// reliable
{
	ParcelObjectOwnersRequest Low 56 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID			LLUUID		}
		{	SessionID		LLUUID	}
	}
	{
		ParcelData		Single
		{	LocalID			S32		}
	}
}


// ParcelObjectOwnersReply
// simulator -> viewer
// reliable
{
	ParcelObjectOwnersReply Low 57 Trusted Zerocoded UDPDeprecated
	{
		Data			Variable
		{	OwnerID			LLUUID			}
		{	IsGroupOwned	BOOL			}
		{	Count			S32				}
		{	OnlineStatus	BOOL			}
	}
}

// GroupNoticeAdd
// Add a group notice. 
// simulator -> dataserver
// reliable
{
	GroupNoticeAdd Low 61 Trusted Unencoded
	{
		AgentData	Single
		{	AgentID			LLUUID		}
	}
	{
		MessageBlock		Single
		{	ToGroupID		LLUUID	}
		{	ID				LLUUID	}
		{	Dialog			U8	}
		{	FromAgentName	Variable	1	}
		{	Message			Variable	2	}
		{	BinaryBucket	Variable	2	}
	}
}


// ****************************************************************************
// Teleport messages
//
// The teleport messages are numerous, so I have attempted to give them a 
// consistent naming convention. Since there is a bit of glob pattern
// aliasing, the rules are applied in order.
//
// Teleport* - viewer->sim or sim->viewer message which announces a 
//             teleportation request, progrees, start, or end.
// Data* - sim->data or data->sim trusted message.
// Space* - sim->space or space->sim trusted messaging
// *Lure - A lure message to pass around information.
//
// All actual viewer teleports will begin with a Teleport* message and
// end in a TeleportStart, TeleportLocal or TeleportFailed message. The TeleportFailed
// message may be returned by any process and must be routed through the
// teleporting agent's simulator and back to the viewer.
// ****************************************************************************

// TeleportCancel viewer->sim
// reliable
{
	TeleportCancel	Low	72 NotTrusted Unencoded
	{
		Info	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
}



// ***************************************************************************
// Viewer to Simulator Messages
// ***************************************************************************



// AgentRequestSit - Try to sit on an object
{
	AgentRequestSit		High 6  NotTrusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID		}
		{	SessionID		LLUUID		}
	}
	{
		TargetObject	Single
		{	TargetID	LLUUID	}
		{	Offset		LLVector3	}
	}
}

// AgentSit - Actually sit on object
{
	AgentSit			High 7  NotTrusted Unencoded
	{
		AgentData			Single
		{	AgentID			LLUUID		}
		{	SessionID		LLUUID		}
	}
}

// SetAlwaysRun
// Lets the viewer choose between running and walking
{
	SetAlwaysRun Low 88 NotTrusted Unencoded
	{
		AgentData				Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
		{	AlwaysRun		BOOL	}
	}
}

// ObjectOwner
// To make public, set OwnerID to LLUUID::null.
// TODO: Eliminate god-bit. Maybe not. God-bit is ok, because it's
// known on the server.
{
	ObjectOwner Low 100 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		HeaderData		Single
		{	Override	BOOL	}	// BOOL, God-bit.
		{	OwnerID		LLUUID	}
		{	GroupID		LLUUID	}
	}
	{
		ObjectData	Variable
		{	ObjectLocalID	U32	}
	}
}

// ObjectGroup
// To make the object part of no group, set GroupID = LLUUID::null.
// This call only works if objectid.ownerid == agentid.
{
	ObjectGroup	Low	101 NotTrusted Zerocoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
		{	GroupID		LLUUID	}
	}
	{
		ObjectData	Variable
		{	ObjectLocalID	U32	}
	}
}

// ModifyLand - sent to modify a piece of land on a simulator.
// viewer -> sim
{
	ModifyLand Low 124 NotTrusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		ModifyBlock			Single
		{	Action			U8	}
		{	BrushSize		U8	}
		{	Seconds			F32	}
		{	Height			F32	}
	}
	{
		ParcelData			Variable
		{	LocalID			S32		}
		{	West			F32		}
		{	South			F32		}
		{	East			F32		}
		{	North			F32		}
	}
	{
		ModifyBlockExtended Variable
		{   BrushSize       F32 }
	}
}


// CrossedRegion - new way to tell a viewer it has gone across a region 
// boundary
{
	CrossedRegion Medium 7 Trusted Unencoded UDPBlackListed
	{
		AgentData		Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		RegionData		Single
		{	SimIP			IPADDR	}
		{	SimPort			IPPORT	}
		{	RegionHandle	U64	}
		{	SeedCapability	Variable	2	}	// URL
	}
	{
		Info			Single
		{	Position		LLVector3	}
		{	LookAt			LLVector3	}
	}
}

//-----------------------------------------------------------------------------
// New Transfer system
//-----------------------------------------------------------------------------

// Request a new transfer (target->source)
{
	TransferRequest Low 153 NotTrusted Zerocoded
	{
		TransferInfo		Single
		{	TransferID		LLUUID	}
		{	ChannelType		S32	}
		{	SourceType		S32	}
		{	Priority		F32	}
		{	Params			Variable	2	}
	}
}

// Return info about a transfer/initiate transfer (source->target)
// Possibly should have a Params field like above
{
	TransferInfo Low 154 NotTrusted Zerocoded
	{
		TransferInfo		Single
		{	TransferID		LLUUID	}
		{	ChannelType		S32	}
		{	TargetType		S32	}
		{	Status			S32	}
		{	Size			S32	}
		{	Params			Variable	2	}
	}
}

{
	TransferPacket High 17 NotTrusted Unencoded
	{
		TransferData Single
		{	TransferID	LLUUID	}
		{	ChannelType	S32	}
		{	Packet		S32	}
		{	Status		S32	}
		{	Data		Variable 2	}
	}
}

// Abort a transfer in progress (either from target->source or source->target)
{
	TransferAbort Low 155 NotTrusted Zerocoded
	{
		TransferInfo		Single
		{	TransferID		LLUUID	}
		{	ChannelType		S32	}
	}
}


//-----------------------------------------------------------------------------
// General file transfer
//-----------------------------------------------------------------------------

// RequestXfer - request an arbitrary xfer
{
	RequestXfer Low 156 NotTrusted Zerocoded
	{
		XferID				Single
		{	ID				U64	}
		{	Filename		Variable	1	}
		{	FilePath		U8	} // ELLPath
		{	DeleteOnCompletion BOOL	} // BOOL
		{	UseBigPackets	BOOL	} // BOOL
		{	VFileID			LLUUID	}
		{	VFileType		S16	}
	}
}

// SendXferPacket - send an additional packet of an arbitrary xfer from sim -> viewer 
{
	SendXferPacket High 18 NotTrusted Unencoded
	{
		XferID				Single
		{	ID				U64	}
		{	Packet			U32	}
	}
	{
		DataPacket			Single
		{	Data			Variable	2	}
	}
}

// ConfirmXferPacket
{
	ConfirmXferPacket High 19 NotTrusted Unencoded
	{
		XferID				Single
		{	ID				U64	}
		{	Packet			U32	}
	}
}

// AbortXfer
{
	AbortXfer Low 157 NotTrusted Unencoded
	{
		XferID				Single
		{	ID				U64	}
		{	Result			S32	}
	}
}

//-----------------------------------------------------------------------------
// Avatar information
//-----------------------------------------------------------------------------


// AvatarSitResponse - response to a request to sit on an object
{
	AvatarSitResponse	High 21 Trusted Zerocoded
	{
		SitObject			Single
		{	ID				LLUUID	}
	}
	{
		SitTransform		Single
		{	AutoPilot		BOOL }
		{	SitPosition		LLVector3	}
		{	SitRotation		LLQuaternion	}
		{	CameraEyeOffset	LLVector3	}
		{	CameraAtOffset	LLVector3	}
		{	ForceMouselook	BOOL }
	}
}

// SetFollowCamProperties
{ 
	SetFollowCamProperties		Low	159 Trusted	Unencoded
	{
		ObjectData			Single
		{	ObjectID				LLUUID	}
	}
	{
		CameraProperty	Variable
		{ 	Type 	S32 }
		{ 	Value 	F32 }
	}
}

// GodKickUser
// When a god wants someone kicked
// viewer -> sim
// reliable
{
	GodKickUser Low 165 NotTrusted Unencoded
	{
		UserInfo		Single
		{	GodID			LLUUID	}
		{	GodSessionID	LLUUID	}
		{	AgentID			LLUUID	}
		{	KickFlags		U32	}
		{	Reason			Variable	2	}	// string
	}
}

// EjectUser
// viewer -> sim
// reliable
{
	EjectUser	Low	167 	NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		Data		Single
		{	TargetID	LLUUID	}
		{	Flags		U32		}
	}
}

// FreezeUser
// Freeze someone who is on my land.
// viewer -> sim
// reliable
{
	FreezeUser	Low	168 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		Data		Single
		{	TargetID	LLUUID	}
		{	Flags		U32		}
	}
}


// AvatarPropertiesRequest
// viewer -> simulator
// reliable
{
	AvatarPropertiesRequest Low 169 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
		{	AvatarID		LLUUID	}
	}
}

// AvatarPropertiesReply
// dataserver -> simulator
// simulator -> viewer
// reliable
{
	AvatarPropertiesReply Low 171 Trusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID		}	// your id
		{	AvatarID		LLUUID		}	// avatar you're asking about
	}
	{
		PropertiesData		Single
		{	ImageID			LLUUID		}
		{	FLImageID		LLUUID		}
		{	PartnerID		LLUUID		}
		{	AboutText		Variable 2	}	// string, up to 512
		{	FLAboutText		Variable 1	}	// string
		{	BornOn			Variable 1	}	// string
		{	ProfileURL		Variable 1	}	// string
		{	CharterMember	Variable 1	}	// special - usually U8
		{	Flags			U32			}
	}
}

{
	AvatarInterestsReply Low 172 Trusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID		}	// your id
		{	AvatarID		LLUUID		}	// avatar you're asking about
	}
	{
		PropertiesData		Single
		{	WantToMask		U32			}
		{	WantToText		Variable 1	}	// string
		{	SkillsMask		U32			}
		{	SkillsText		Variable 1	}	// string
		{	LanguagesText	Variable 1	}	// string
	}
}

// AvatarGroupsReply
// dataserver -> simulator
// simulator -> viewer
// reliable
{
	AvatarGroupsReply Low 173 Trusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID		}	// your id
		{	AvatarID		LLUUID		}	// avatar you're asking about
	}
	{
		GroupData			Variable
		{	GroupPowers			U64			}
		{	AcceptNotices		BOOL		}
		{	GroupTitle			Variable 1	}
		{	GroupID				LLUUID		}
		{	GroupName			Variable 1	}
		{	GroupInsigniaID		LLUUID		}
	}
	{
		NewGroupData		Single
		{	ListInProfile	BOOL		}	// whether group displays in profile
	}
}


// AvatarPropertiesUpdate
// viewer -> simulator
// reliable
{
	AvatarPropertiesUpdate Low 174 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		PropertiesData	Single
		{	ImageID			LLUUID			}
		{	FLImageID		LLUUID			}
		{	AboutText		Variable	2	}	// string, up to 512
		{	FLAboutText		Variable	1	}
		{	AllowPublish		BOOL			}	// whether profile is externally visible or not
		{	MaturePublish		BOOL		}	// profile is "mature"
		{	ProfileURL		Variable	1	}	// string
	}
}

// AvatarInterestsUpdate
// viewer -> simulator
// reliable
{
	AvatarInterestsUpdate Low 175 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID			LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		PropertiesData	Single
		{	WantToMask		U32				}
		{	WantToText		Variable	1	}	// string
		{	SkillsMask		U32				}
		{	SkillsText		Variable	1	}	// string
		{	LanguagesText	Variable	1	}	// string	
	}
}



// AvatarNotesReply
// dataserver -> simulator
// simulator -> viewer
// reliable
{
	AvatarNotesReply Low 176 Trusted Unencoded
	{
		AgentData		Single
		{	AgentID			LLUUID		}
	}
	{
		Data		Single
		{	TargetID		LLUUID		}
		{	Notes			Variable 2	}	// string
	}
}


// AvatarNotesUpdate
// viewer -> simulator -> dataserver
// reliable
{
	AvatarNotesUpdate Low 177 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID			LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		Data		Single
		{	TargetID		LLUUID		}
		{	Notes			Variable 2	}	// string
	}
}


// AvatarPicksReply
// dataserver -> simulator -> viewer
// Send the header information for this avatar's picks
// This fills in the tabs of the Picks panel.
// reliable
{
	AvatarPicksReply Low 178 Trusted Unencoded
	{
		AgentData		Single
		{	AgentID			LLUUID		}
		{	TargetID		LLUUID		}
	}
	{
		Data			Variable
		{	PickID			LLUUID		}
		{	PickName		Variable 1	}	// string
	}
}

// PickInfoReply
// dataserver -> simulator
// simulator -> viewer
// reliable
{
	PickInfoReply Low 184 Trusted Unencoded
    {
        AgentData    Single
        {    AgentID        LLUUID    }
    }
    {
		Data        Single
		{	PickID			LLUUID		}
		{	CreatorID		LLUUID		}
		{	TopPick			BOOL		}
		{	ParcelID		LLUUID		}
		{	Name			Variable 1	}
        {	Desc			Variable 2	}
        {	SnapshotID		LLUUID		}
        {	User			Variable 1	}
        {	OriginalName	Variable 1	}
        {	SimName			Variable 1	}
        {	PosGlobal		LLVector3d	}
        {	SortOrder		S32			}
        {	Enabled			BOOL		}
    }
}


// PickInfoUpdate
// Update a pick.  ParcelID is set on the simulator as the message
// passes through.
// If TopPick is TRUE, the simulator will only pass on the message
// if the agent_id is a god.
// viewer -> simulator -> dataserver
// reliable
{
	PickInfoUpdate Low 185 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID			LLUUID		}
		{	SessionID		LLUUID		}
	}
	{
		Data		Single
		{	PickID			LLUUID		}
		{	CreatorID		LLUUID		}
		{	TopPick			BOOL		}
		{	ParcelID		LLUUID		}
		{	Name			Variable 1	}
		{	Desc			Variable 2	}
		{	SnapshotID		LLUUID		}
		{	PosGlobal		LLVector3d	}
        {	SortOrder		S32			}
        {	Enabled			BOOL		}
	}
}


// PickDelete
// Delete a non-top pick from the database.
// viewer -> simulator -> dataserver
// reliable
{
	PickDelete Low 186 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID			LLUUID		}
		{	SessionID		LLUUID		}
	}
	{
		Data	Single
		{	PickID			LLUUID		}
	}
}

// ScriptQuestion
// reliable
{
	ScriptQuestion Low 188 Trusted Unencoded
	{
		Data	Single
		{	TaskID			LLUUID	}
		{	ItemID			LLUUID	}
		{	ObjectName		Variable	1	}
		{	ObjectOwner		Variable	1	}
		{	Questions		S32	}
	}
	{
	Experience	Single
		{	ExperienceID	LLUUID	}
	}
}

// ScriptControlChange
// reliable
{
	ScriptControlChange Low 189 Trusted Unencoded
	{
		Data	Variable
		{	TakeControls	BOOL 	}
		{	Controls		U32		}
		{	PassToAgent		BOOL	}
	}
}

// ScriptDialog
// sim -> viewer
// reliable
{
	ScriptDialog Low 190 Trusted Zerocoded
	{
		Data	Single
		{	ObjectID	LLUUID			}
		{	FirstName	Variable	1	}
		{	LastName	Variable	1	}
		{	ObjectName	Variable	1	}
		{	Message		Variable	2	}
		{	ChatChannel	S32				}
		{	ImageID		LLUUID			}
	}
	{
		Buttons	Variable
		{	ButtonLabel		Variable	1	}
	}
	{
		OwnerData Variable
		{	OwnerID		LLUUID	}
	}
}


// ScriptDialogReply
// viewer -> sim
// reliable
{
	ScriptDialogReply Low 191 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		Data	Single
		{	ObjectID	LLUUID			}
		{	ChatChannel	S32				}
		{	ButtonIndex	S32				}
		{	ButtonLabel	Variable 1		}
	}
}


// ForceScriptControlRelease
// reliable
{
	ForceScriptControlRelease Low 192 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
}

// RevokePermissions
// reliable
{
	RevokePermissions Low 193 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		Data	Single
		{ ObjectID				LLUUID }
		{ ObjectPermissions		U32 }
	}
}

// LoadURL
// sim -> viewer
// Ask the user if they would like to load a URL
// reliable
{
	LoadURL Low 194 Trusted Unencoded
	{
		Data	Single
		{	ObjectName		Variable	1	}
		{	ObjectID		LLUUID			}
		{	OwnerID			LLUUID			}
		{	OwnerIsGroup	BOOL			}
		{	Message			Variable	1	}
		{	URL				Variable	1	}
	}
}

// ScriptTeleportRequest
// reliable
{
	ScriptTeleportRequest Low 195 Trusted Unencoded
	{
		Data	Single
		{	ObjectName		Variable	1	}
		{	SimName			Variable	1	}
		{	SimPosition		LLVector3		}
		{	LookAt			LLVector3		}
	}
}



// ParcelSetOtherCleanTime
// viewer -> sim
// reliable
{
	ParcelSetOtherCleanTime Low 200 NotTrusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		ParcelData			Single
		{	LocalID			S32				}
		{	OtherCleanTime	S32				}
	}
}


// Disable makes objects nonphysical and turns off their scripts.
// ParcelDisableObjects
// viewer -> sim
// reliable
{
	ParcelDisableObjects Low 201 NotTrusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		ParcelData			Single
		{	LocalID			S32				}
		{	ReturnType		U32				}
	}
	{
		TaskIDs			Variable
		{	TaskID			LLUUID			}
	}
	{
		OwnerIDs			Variable
		{	OwnerID			LLUUID			}
	}
}



// reserved for when island owners force re-claim parcel
{
	ParcelReclaim Low 208 NotTrusted Unencoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		Data				Single
		{	LocalID			S32		}	// parcel id
	}
}

// viewer -> sim
// ParcelAccessListRequest
{
	ParcelAccessListRequest Low 215 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		Data	Single
		{	SequenceID		S32		}
		{	Flags			U32		}
		{	LocalID			S32		}
	}
}


// sim -> viewer
// ParcelAccessListReply
{
	ParcelAccessListReply Low 216 Trusted Zerocoded
	{
		Data	Single
		{	AgentID			LLUUID	}
		{	SequenceID		S32		}
		{	Flags			U32		}
		{	LocalID			S32		}
	}
	{
		List	Variable
		{	ID			LLUUID		}
		{	Time		S32			} // time_t
		{	Flags		U32			}
	}
}

// viewer -> sim
// ParcelAccessListUpdate
{
	ParcelAccessListUpdate Low 217 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		Data	Single
		{	Flags			U32		}
		{	LocalID			S32		}
		{	TransactionID	LLUUID	}
		{	SequenceID		S32		}
		{	Sections		S32		}
	}
	{
		List	Variable
		{	ID			LLUUID		}
		{	Time		S32			} // time_t
		{	Flags		U32			}
	}
}


// UUIDGroupNameRequest
// Translate a UUID into a group name
{
	UUIDGroupNameRequest Low 237 NotTrusted Unencoded
	{
		UUIDNameBlock	Variable
		{	ID			LLUUID	}
	}
}

// UUIDGroupNameReply
// Translate a UUID into a group name
{
	UUIDGroupNameReply Low 238 Trusted Unencoded
	{ 
		UUIDNameBlock	Variable
		{	ID			LLUUID	}
		{	GroupName	Variable	1	}
	}
}

// LogoutRequest
// viewer -> sim
// reliable
{
	LogoutRequest Low 252 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
}


// LogoutReply
// it's ok for the viewer to quit.
// sim -> viewer
// reliable
// Includes inventory items to update with new asset ids
{
	LogoutReply Low 253 Trusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		InventoryData		Variable
		{	ItemID			LLUUID	}  // null if list is actually empty (but has one entry 'cause it can't have none)
	}
}

// RetrieveInstantMessages - used to get instant messages that
// were persisted out to the database while the user was offline
// Sent from viewer->simulator.   Also see RetrieveIMsExtended (back-end only)
{
	RetrieveInstantMessages Low 255 NotTrusted Unencoded
	{
		AgentData 		Single
		{   AgentID     LLUUID  }
		{	SessionID	LLUUID	}
	}
}

// FindAgent - used to find an agent's global position. I used a
// variable sized LocationBlock so that the message can be recycled with
// minimum new messages and handlers.
{
	FindAgent Low 256 NotTrusted Unencoded
	{
		AgentBlock		Single
		{	Hunter		LLUUID	}
		{	Prey		LLUUID	}
		{	SpaceIP		IPADDR	}
	}
	{
		LocationBlock	Variable
		{	GlobalX		F64	}
		{	GlobalY		F64	}
	}
}

//
// This is used bi-directionally between sim, dataserver, and viewer.
// THIS MESSAGE CAN NOT CREATE NEW INVENTORY ITEMS.
//
{
	UpdateInventoryItem Low 266 NotTrusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
		{	TransactionID	LLUUID	}
	}
	{
		InventoryData		Variable
		{	ItemID			LLUUID	}
		{	FolderID		LLUUID	}
		{	CallbackID		U32		} // Async Response
		
		{	CreatorID		LLUUID	}	// permissions
		{	OwnerID			LLUUID	}	// permissions
		{	GroupID			LLUUID	}	// permissions
		{	BaseMask		U32	}	// permissions
		{	OwnerMask		U32	}	// permissions
		{	GroupMask		U32	}	// permissions
		{	EveryoneMask	U32	}	// permissions
		{	NextOwnerMask	U32	}	// permissions
		{	GroupOwned		BOOL	}	// permissions

		{	TransactionID	LLUUID	} // TransactionID: new assets only
		{	Type			S8	}
		{	InvType			S8	}
		{	Flags			U32	}
		{	SaleType		U8	}
		{	SalePrice		S32	}
		{	Name			Variable	1	}
		{	Description		Variable	1	}
		{	CreationDate	S32	}
		{	CRC				U32	}
	}
}


{
	MoveInventoryItem	Low	268 NotTrusted	Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
		{	Stamp		BOOL	} // should the server re-timestamp?
	}
	{
		InventoryData	Variable
		{	ItemID		LLUUID	}
		{	FolderID	LLUUID	}
		{	NewName			Variable	1	}
	}
}

// copy inventory item by item id to specified destination folder, 
// send out bulk inventory update when done.
//
// Inventory items are only unique for {agent, inv_id} pairs;
// the OldItemID needs to be paired with the OldAgentID to
// produce a unique inventory item.
{
	CopyInventoryItem	Low	269 NotTrusted	Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		InventoryData		Variable
		{	CallbackID	U32			} // Async response
		{	OldAgentID		LLUUID	}
		{	OldItemID		LLUUID	}
		{	NewFolderID		LLUUID	}
		{	NewName			Variable	1	}
	}
}

{
	RemoveInventoryItem Low 270 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		InventoryData	Variable
		{	ItemID		LLUUID	}
	}
}

{
	ChangeInventoryItemFlags Low 271 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		InventoryData	Variable
		{	ItemID		LLUUID	}
		{	Flags		U32	}
	}
}

{
	CreateInventoryFolder	Low 273 NotTrusted Unencoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		FolderData			Single
		{	FolderID		LLUUID	}
		{	ParentID		LLUUID	}
		{	Type			S8	}
		{	Name			Variable	1	}
	}
}

{
	UpdateInventoryFolder Low 274 NotTrusted Unencoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		FolderData			Variable
		{	FolderID		LLUUID	}
		{	ParentID		LLUUID	}
		{	Type			S8	}
		{	Name			Variable	1	}
	}
}

{
	MoveInventoryFolder	Low	275 NotTrusted	Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
		{	Stamp		BOOL	} // should the server re-timestamp children
	}
	{
		InventoryData	Variable
		{	FolderID	LLUUID	}
		{	ParentID	LLUUID	}
	}
}

{
	RemoveInventoryFolder Low 276 NotTrusted Unencoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		FolderData			Variable
		{	FolderID		LLUUID	}
	}
}

// Get inventory segment.
{
	FetchInventoryDescendents Low 277 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		InventoryData	Single
		{	FolderID	LLUUID	}
		{	OwnerID		LLUUID	}
		{	SortOrder	S32		} // 0 = name, 1 = time
		{	FetchFolders	BOOL	} // false will omit folders in query
		{	FetchItems		BOOL	} // false will omit items in query
	}
}

// return inventory segment. 
// *NOTE: This could be compressed more since we already know the
// parent_id for folders and the folder_id for items, but this is
// reasonable until we heve server side inventory.
{
	InventoryDescendents Low 278 Trusted Zerocoded
	{
		AgentData		Single
		{	AgentID			LLUUID	}
		{	FolderID		LLUUID	}
		{	OwnerID			LLUUID	} // owner of the folders creatd.
		{	Version			S32		} // version of the folder for caching
		{	Descendents		S32		} // count to help with caching
	}
	{
		FolderData		Variable
		{	FolderID		LLUUID	}
		{	ParentID		LLUUID	}
		{	Type			S8	}
		{	Name			Variable	1	}
	}
	{
		ItemData		Variable
		{	ItemID			LLUUID	}
		{	FolderID		LLUUID	}
		{	CreatorID		LLUUID	}	// permissions
		{	OwnerID			LLUUID	}	// permissions
		{	GroupID			LLUUID	}	// permissions
		{	BaseMask		U32	}	// permissions
		{	OwnerMask		U32	}	// permissions
		{	GroupMask		U32	}	// permissions
		{	EveryoneMask	U32	}	// permissions
		{	NextOwnerMask	U32	}	// permissions
		{	GroupOwned		BOOL	}	// permissions
		{	AssetID			LLUUID	}
		{	Type			S8	}
		{	InvType			S8	}
		{	Flags			U32	}
		{	SaleType		U8	}
		{	SalePrice		S32	}
		{	Name			Variable	1	}
		{	Description		Variable	1	}
		{	CreationDate	S32	}
		{	CRC				U32	}
	}
}

// Get inventory item(s) - response comes through FetchInventoryReply
{
	FetchInventory	Low	279 NotTrusted	Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		InventoryData	Variable
		{	OwnerID		LLUUID	}
		{	ItemID		LLUUID	}
	}
}

// response to fetch inventory
{
	FetchInventoryReply	Low	280 Trusted	Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
	}
	{
		InventoryData		Variable
		{	ItemID			LLUUID	}
		{	FolderID		LLUUID	}

		{	CreatorID		LLUUID	}	// permissions
		{	OwnerID			LLUUID	}	// permissions
		{	GroupID			LLUUID	}	// permissions
		{	BaseMask		U32	}	// permissions
		{	OwnerMask		U32	}	// permissions
		{	GroupMask		U32	}	// permissions
		{	EveryoneMask	U32	}	// permissions
		{	NextOwnerMask	U32	}	// permissions
		{	GroupOwned		BOOL	}	// permissions

		{	AssetID			LLUUID	}
		{	Type			S8	}
		{	InvType			S8	}
		{	Flags			U32	}
		{	SaleType		U8	}
		{	SalePrice		S32	}
		{	Name			Variable	1	}
		{	Description		Variable	1	}
		{	CreationDate	S32	}
		{	CRC				U32	}
	}
}

// Can only fit around 7 items per packet - that's the way it goes. At
// least many bulk updates can be packed.
// Only from dataserver->sim->viewer
{
	BulkUpdateInventory Low 281 Trusted Zerocoded
	{
		AgentData		Single
		{	AgentID			LLUUID	}
		{	TransactionID	LLUUID	}
	}
	{
		FolderData		Variable
		{	FolderID		LLUUID	}
		{	ParentID		LLUUID	}
		{	Type			S8	}
		{	Name			Variable	1	}
	}
	{
		ItemData		Variable
		{	ItemID			LLUUID	}
		{	CallbackID		U32		}	// Async Response
		{	FolderID		LLUUID	}
		{	CreatorID		LLUUID	}	// permissions
		{	OwnerID			LLUUID	}	// permissions
		{	GroupID			LLUUID	}	// permissions
		{	BaseMask		U32	}	// permissions
		{	OwnerMask		U32	}	// permissions
		{	GroupMask		U32	}	// permissions
		{	EveryoneMask	U32	}	// permissions
		{	NextOwnerMask	U32	}	// permissions
		{	GroupOwned		BOOL	}	// permissions
		{	AssetID			LLUUID	}
		{	Type			S8	}
		{	InvType			S8	}
		{	Flags			U32	}
		{	SaleType		U8	}
		{	SalePrice		S32	}
		{	Name			Variable	1	}
		{	Description		Variable	1	}
		{	CreationDate	S32	}
		{	CRC				U32	}
	}
}

// This is the new improved way to remove inventory items.  It is
// currently only supported in viewer->userserver->dataserver
// messages typically initiated by an empty trash method.
{
	RemoveInventoryObjects	Low	284 NotTrusted Unencoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		FolderData			Variable
		{	FolderID		LLUUID	}
	}
	{
		ItemData			Variable
		{	ItemID			LLUUID	}
	}
}

// This is how you remove inventory when you're not even sure what it
// is - only it's parenting.
{
	PurgeInventoryDescendents Low 285 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		InventoryData	Single
		{	FolderID	LLUUID	}
	}
}

// These messages are viewer->simulator requests to update a task's
// inventory.
// if Key == 0, itemid is the key. if Key == 1, assetid is the key.
{
	UpdateTaskInventory Low 286 NotTrusted Zerocoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID  }
	}
	{
		UpdateData			Single
		{	LocalID			U32	}
		{	Key				U8	}
	}
	{
		InventoryData		Single
		{	ItemID			LLUUID	}
		{	FolderID		LLUUID	}
		{	CreatorID		LLUUID	}	// permissions
		{	OwnerID			LLUUID	}	// permissions
		{	GroupID			LLUUID	}	// permissions
		{	BaseMask		U32	}	// permissions
		{	OwnerMask		U32	}	// permissions
		{	GroupMask		U32	}	// permissions
		{	EveryoneMask	U32	}	// permissions
		{	NextOwnerMask	U32	}	// permissions
		{	GroupOwned		BOOL	}	// permissions
		{	TransactionID	LLUUID	}
		{	Type			S8	}
		{	InvType			S8	}
		{	Flags			U32	}
		{	SaleType		U8	}
		{	SalePrice		S32	}
		{	Name			Variable	1	}
		{	Description		Variable	1	}
		{	CreationDate	S32	}
		{	CRC				U32	}
	}
}

{
	RemoveTaskInventory Low 287 NotTrusted Zerocoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID  }
	}
	{
		InventoryData		Single
		{	LocalID			U32	}
		{	ItemID			LLUUID	}
	}
}

{
	MoveTaskInventory	Low	288 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID  }
		{	FolderID	LLUUID	}
	}
	{
		InventoryData	Single
		{	LocalID		U32		}
		{	ItemID		LLUUID	}
	}
}

{
	RequestTaskInventory Low 289 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID  }
	}
	{
		InventoryData		Single
		{	LocalID		U32	}
	}
}

{
	ReplyTaskInventory Low 290 Trusted Zerocoded
	{
		InventoryData		Single
		{	TaskID			LLUUID	}
		{	Serial			S16	}	// S16
		{	Filename		Variable	1	}
	}
}

{
	DeRezObject Low 291 NotTrusted Zerocoded
	{
		AgentData		Single
		{  AgentID			LLUUID  }
		{  SessionID		LLUUID  }
	}
	{
		AgentBlock		Single
		{  GroupID			LLUUID  }
		{  Destination		U8	}
		{  DestinationID	LLUUID	}	// see above
		{  TransactionID	LLUUID	}
		{  PacketCount		U8	}
		{  PacketNumber		U8	}
	}
	{
		ObjectData		Variable
		{  ObjectLocalID	U32	}   // object id in world 
	}
}

// This message is sent when a derez succeeds, but there's no way to
// know, since no inventory is created on the viewer. For example, when
// saving into task inventory.
{
	DeRezAck Low 292 Trusted Unencoded
	{
		TransactionData			Single
		{	TransactionID	LLUUID	}
		{	Success			BOOL	}
	}
}

// This message is sent from viewer -> simulator when the viewer wants
// to rez an object out of inventory.
{
	RezObject Low 293 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID  }
		{	SessionID	LLUUID  }
		{	GroupID		LLUUID	}
	}
	{
		RezData			Single
		{	FromTaskID				LLUUID	}
		{	BypassRaycast			U8	}
		{	RayStart				LLVector3	}
		{	RayEnd					LLVector3	}
		{	RayTargetID				LLUUID	}
		{	RayEndIsIntersection	BOOL }
		{   RezSelected				BOOL }
		{	RemoveItem				BOOL }
		{	ItemFlags				U32 }
		{	GroupMask				U32 }
		{	EveryoneMask			U32 }
		{	NextOwnerMask			U32	}
	}
	{
		InventoryData			Single
		{	ItemID				LLUUID	}
		{	FolderID			LLUUID	}
		{	CreatorID			LLUUID	}	// permissions
		{	OwnerID				LLUUID	}	// permissions
		{	GroupID				LLUUID	}	// permissions
		{	BaseMask			U32	}	// permissions
		{	OwnerMask			U32	}	// permissions
		{	GroupMask			U32	}	// permissions
		{	EveryoneMask		U32	}	// permissions
		{	NextOwnerMask		U32	}	// permissions
		{	GroupOwned			BOOL	}	// permissions
		{	TransactionID		LLUUID	}
		{	Type				S8	}
		{	InvType				S8	}
		{	Flags				U32	}
		{	SaleType			U8	}
		{	SalePrice			S32	}
		{	Name				Variable	1	}
		{	Description			Variable	1	}
		{	CreationDate		S32	}
		{	CRC				U32	}
	}
}

// This message is sent from viewer -> simulator when the viewer wants
// to rez an object from a notecard.
{
	RezObjectFromNotecard Low 294 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID  }
		{	SessionID	LLUUID  }
		{	GroupID		LLUUID	}
	}
	{
		RezData			Single
		{	FromTaskID				LLUUID	}
		{	BypassRaycast			U8	}
		{	RayStart				LLVector3	}
		{	RayEnd					LLVector3	}
		{	RayTargetID				LLUUID	}
		{	RayEndIsIntersection	BOOL }
		{   RezSelected				BOOL }
		{	RemoveItem				BOOL }
		{	ItemFlags				U32 }
		{	GroupMask				U32 }
		{	EveryoneMask			U32 }
		{	NextOwnerMask			U32	}
	}
	{
		NotecardData		Single
		{	NotecardItemID	LLUUID	}
		{	ObjectID		LLUUID	}
	}
	{
		InventoryData		Variable
		{	ItemID			LLUUID	}
	}
}

{
	AcceptFriendship Low 297 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID  }
		{	SessionID	LLUUID  }
	}
	{
		TransactionBlock	Single
		{	TransactionID	LLUUID	}
	}
	{
		FolderData			Variable
		{	FolderID		LLUUID	} // place to put calling card.
	}
}

{
	DeclineFriendship Low 298 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID  }
		{	SessionID	LLUUID  }
	}
	{
		TransactionBlock	Single
		{	TransactionID	LLUUID	}
	}
}

{
	FormFriendship	Low	299 Trusted	Unencoded
	{
		AgentBlock		Single
		{ SourceID		LLUUID	}
		{ DestID		LLUUID	}
	}
}

{
	TerminateFriendship Low 300 NotTrusted Unencoded
	{
		AgentData		Single
		{ AgentID		LLUUID	}
		{ SessionID		LLUUID	}
	}
	{
		ExBlock			Single
		{ OtherID		LLUUID	}
	}
}

// used to give someone a calling card.
{
	OfferCallingCard Low 301 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID  }
		{	SessionID	LLUUID  }
	}
	{
		AgentBlock			Single
		{	DestID			LLUUID	}
		{	TransactionID	LLUUID	}
	}
}

{
	AcceptCallingCard Low 302 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID  }
		{	SessionID	LLUUID  }
	}
	{
		TransactionBlock	Single
		{	TransactionID	LLUUID	}
	}
	{
		FolderData			Variable
		{	FolderID		LLUUID	} // place to put calling card.
	}
}

{
	DeclineCallingCard Low 303 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID  }
		{	SessionID	LLUUID  }
	}
	{
		TransactionBlock	Single
		{	TransactionID	LLUUID	}
	}
}


// Rez a script onto an object
{
	RezScript Low 304 NotTrusted Zerocoded
	{
		AgentData		Single
		{ AgentID		LLUUID	}
		{ SessionID		LLUUID	}
		{  GroupID			LLUUID	}
	}
	{
		UpdateBlock			Single
		{  ObjectLocalID	U32	}   // object id in world 
		{  Enabled			BOOL	}	// is script rezzed in enabled?
	}
	{
		InventoryBlock		Single
		{	ItemID			LLUUID	}
		{	FolderID		LLUUID	}
		{	CreatorID		LLUUID	}	// permissions
		{	OwnerID			LLUUID	}	// permissions
		{	GroupID			LLUUID	}	// permissions
		{	BaseMask		U32	}	// permissions
		{	OwnerMask		U32	}	// permissions
		{	GroupMask		U32	}	// permissions
		{	EveryoneMask	U32	}	// permissions
		{	NextOwnerMask	U32	}	// permissions
		{	GroupOwned		BOOL	}	// permissions
		{	TransactionID	LLUUID	}
		{	Type			S8	}
		{	InvType			S8	}
		{	Flags			U32	}
		{	SaleType		U8	}
		{	SalePrice		S32	}
		{	Name			Variable	1	}
		{	Description		Variable	1	}
		{	CreationDate	S32	}
		{	CRC				U32	}
	}
}

// Create inventory
{
	CreateInventoryItem Low 305 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID		}
		{	SessionID	LLUUID		}
	}
	{	
		InventoryBlock		Single
		{	CallbackID	U32			} // Async Response
		{	FolderID		LLUUID	}
		{	TransactionID			LLUUID	} // Going to become TransactionID
		{	NextOwnerMask	U32	}
		{	Type			S8	}
		{	InvType			S8	}
		{	WearableType	U8	}
		{	Name			Variable	1	}
		{	Description		Variable	1	}
	}
}

// give agent a landmark for an event.
{
	CreateLandmarkForEvent	Low	306 NotTrusted	Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID		}
		{	SessionID	LLUUID		}
	}
	{
		EventData		Single
		{	EventID		U32		}
	}
	{	
		InventoryBlock		Single
		{	FolderID		LLUUID	}
		{	Name			Variable	1	}
	}
}

// Move money from one agent to another. Validation will happen at the
// simulator, the dataserver will actually do the work. Dataserver
// generates a MoneyBalance message in reply.  The simulator
// will generate a MoneyTransferBackend in response to this.
// viewer -> simulator -> dataserver 
{
	MoneyTransferRequest Low 311 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		MoneyData			Single
		{	SourceID		LLUUID  }
		{	DestID			LLUUID	}	// destination of the transfer
		{	Flags			U8		}
		{	Amount			S32		}
		{	AggregatePermNextOwner	U8	}
		{	AggregatePermInventory	U8	}
		{	TransactionType	S32		}	// see lltransactiontypes.h
		{	Description		Variable 1	}	// string, name of item for purchases
	}
}


// viewer -> userserver -> dataserver
// Reliable
{
	MoneyBalanceRequest Low 313 NotTrusted Zerocoded
	{
		AgentData	Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		MoneyData			Single
		{	TransactionID	LLUUID	}
	}
}


// dataserver -> simulator -> viewer
{
	MoneyBalanceReply Low 314 Trusted Zerocoded
	{
		MoneyData			Single
		{	AgentID				LLUUID  }
		{	TransactionID		LLUUID	}
		{	TransactionSuccess	BOOL	}	// BOOL
		{	MoneyBalance		S32	}
		{	SquareMetersCredit	S32	}
		{	SquareMetersCommitted	S32	}
		{	Description			Variable 1	}	// string
	}
	// For replies that are part of a transaction (buying something) provide
	// metadata for localization.  If TransactionType is 0, the message is
	// purely a balance update.  Added for server 1.40 and viewer 2.1.  JC
	{
		TransactionInfo		Single
		{	TransactionType			S32			}	// lltransactiontype.h
		{	SourceID				LLUUID		}
		{	IsSourceGroup			BOOL		}
		{	DestID					LLUUID		}
		{	IsDestGroup				BOOL		}
		{	Amount					S32			}
		{	ItemDescription			Variable 1	}	// string
	}
}


// RoutedMoneyBalanceReply
// This message is used when a dataserver needs to send updated
// money balance information to a simulator other than the one it
// is connected to.  It uses the standard TransferBlock format.
// dataserver -> simulator -> spaceserver -> simulator -> viewer
// reliable
{
	RoutedMoneyBalanceReply Low 315 Trusted Zerocoded UDPDeprecated
	{
		TargetBlock			Single
		{	TargetIP		IPADDR	}	// U32 encoded IP
		{	TargetPort		IPPORT	}
	}
	{
		MoneyData			Single
		{	AgentID				LLUUID  }
		{	TransactionID		LLUUID	}
		{	TransactionSuccess	BOOL	}	// BOOL
		{	MoneyBalance		S32	}
		{	SquareMetersCredit	S32	}
		{	SquareMetersCommitted	S32	}
		{	Description			Variable 1	}	// string
	}
	// See MoneyBalanceReply above.
	{
		TransactionInfo		Single
		{	TransactionType			S32			}	// lltransactiontype.h
		{	SourceID				LLUUID		}
		{	IsSourceGroup			BOOL		}
		{	DestID					LLUUID		}
		{	IsDestGroup				BOOL		}
		{	Amount					S32			}
		{	ItemDescription			Variable 1	}	// string
	}
}

// Sent from viewer to simulator to set user rights. This message will be
// relayed up to the dataserver through a PUT. If that
// succeeds, an UpdateUserRights will be relayed to the originating
// viewer, and a presence lookup will be performed to find
// agent-related and the same PUT will be issued to the sim host if
// they are online.
{
	GrantUserRights Low 320 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		Rights			Variable
		{	AgentRelated		LLUUID		}
		{	RelatedRights		S32		}
	}
}

// This message is sent from the simulator to the viewer to indicate a
// targets granted rights. This is only sent to the originator of the
// request and the target agent if it is a modify or map
// right. Adding/removing online status rights will show up as an
// online/offline notification.
{
	ChangeUserRights Low 321 Trusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
	}
	{
		Rights			Variable
		{	AgentRelated		LLUUID		}
		{	RelatedRights		S32		}
	}
}


// *************************************************************************
// Asset storage messages
// *************************************************************************

// current assumes an existing UUID, need to enhance for new assets
{
	AssetUploadRequest Low 333 NotTrusted Unencoded
	{
		AssetBlock		Single
		{	TransactionID LLUUID	}
		{	Type		S8	}
		{	Tempfile	BOOL	}
		{	StoreLocal	BOOL	}
		{	AssetData	Variable	2	}  // Optional: the actual asset data if the whole thing will fit it this packet
	}
}

{
	AssetUploadComplete Low 334 NotTrusted Unencoded
	{
		AssetBlock		Single
		{	UUID		LLUUID	}
		{	Type		S8	}
		{	Success		BOOL	}
	}
}

// UpdateGroupInfo
// viewer -> simulator
// simulator -> dataserver
// reliable
{
	UpdateGroupInfo Low 341 NotTrusted Zerocoded
	{
		AgentData		Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		GroupData		Single
		{	GroupID			LLUUID	}
		{	Charter			Variable	2	}	// string
		{	ShowInList		BOOL			}
		{	InsigniaID		LLUUID	}
		{	MembershipFee	S32				}
		{	OpenEnrollment	BOOL			}
		{	AllowPublish	BOOL	}
		{	MaturePublish	BOOL	}
	}
}

// GroupRoleChanges
// viewer -> simulator -> dataserver
// reliable
{
	GroupRoleChanges	Low	342 NotTrusted	Unencoded
	{
		AgentData	Single
		{	AgentID	LLUUID	}
		{	SessionID	LLUUID	}
		{	GroupID		LLUUID	}
	}
	{
		RoleChange	Variable
		{	RoleID		LLUUID	}
		{	MemberID	LLUUID	}
		{	Change		U32		}
	}
}

// JoinGroupRequest
// viewer -> simulator
// reliable
{
	JoinGroupRequest Low 343 NotTrusted Zerocoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		GroupData	Single
		{	GroupID		LLUUID	}
	}
}

// JoinGroupReply
// dataserver -> simulator -> viewer
{
	JoinGroupReply Low 344 Trusted Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
	}
	{
		GroupData	Single
		{	GroupID		LLUUID	}
		{	Success		BOOL	}
	}
}

// LeaveGroupRequest
// viewer -> simulator -> dataserver
// reliable
{
	LeaveGroupRequest Low 347 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		GroupData		Single
		{	GroupID		LLUUID	}
	}
}

// LeaveGroupReply
// dataserver -> simulator -> viewer
{
	LeaveGroupReply Low 348 Trusted Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
	}
	{
		GroupData	Single
		{	GroupID		LLUUID	}
		{	Success		BOOL	}
	}
}

// GroupProfileRequest
// viewer-> simulator -> dataserver
// reliable
{
	GroupProfileRequest Low 351 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID			LLUUID			}
		{	SessionID	LLUUID	}
	}
	{
		GroupData	Single
		{	GroupID			LLUUID			}
	}
}

// GroupProfileReply
// dataserver -> simulator -> viewer
// reliable
{
	GroupProfileReply Low 352 Trusted Zerocoded
	{
		AgentData	Single
		{	AgentID			LLUUID			}
	}
	{
		GroupData		Single
		{	GroupID			LLUUID			}
		{	Name			Variable	1	}	// string
		{	Charter			Variable	2	}	// string
		{	ShowInList		BOOL	}
		{	MemberTitle		Variable	1	}	// string
		{	PowersMask		U64	}	// U32 mask
		{	InsigniaID		LLUUID			}
		{	FounderID		LLUUID			}
		{	MembershipFee	S32				}
		{	OpenEnrollment	BOOL			}   // BOOL (U8)
		{	Money			S32	}
		{	GroupMembershipCount	S32	}
		{	GroupRolesCount			S32	}
		{	AllowPublish	BOOL	}
		{	MaturePublish	BOOL	}
		{	OwnerRole		LLUUID	}
	}
}

// viewer -> simulator -> dataserver
{
	SetGroupAcceptNotices Low 370 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		Data	Single
		{	GroupID		LLUUID	}
		{	AcceptNotices	BOOL	}
	}
	{
		NewData				Single
		{	ListInProfile	BOOL	}
	}
}

// GroupRoleDataRequest
// viewer -> simulator -> dataserver
{
	GroupRoleDataRequest Low	371 NotTrusted	Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		GroupData	Single
		{	GroupID		LLUUID	}
		{	RequestID	LLUUID	}
	}
}


// GroupRoleDataReply
// All role data for this group
// dataserver -> simulator -> agent
{
	GroupRoleDataReply Low	372 Trusted	Unencoded
	{
		AgentData	Single
		{	AgentID			LLUUID			}
	}
	{
		GroupData		Single
		{	GroupID			LLUUID	}
		{	RequestID	LLUUID	}
		{	RoleCount	S32		}
	}
	{
		RoleData	Variable
		{	RoleID		LLUUID	}
		{	Name		Variable	1	}
		{	Title		Variable	1	}
		{	Description	Variable	1	}
		{	Powers		U64		}
		{	Members		U32		}
	}
}

// GroupRoleMembersRequest
// viewer -> simulator -> dataserver
{
	GroupRoleMembersRequest Low	373 NotTrusted	Unencoded
	{
		AgentData	Single
		{	AgentID			LLUUID			}
		{	SessionID	LLUUID	}
	}
	{
		GroupData		Single
		{	GroupID		LLUUID	}
		{	RequestID	LLUUID	}
	}
}

// GroupRoleMembersReply
// All role::member pairs for this group.
// dataserver -> simulator -> agent
{
	GroupRoleMembersReply Low	374 Trusted	Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	GroupID		LLUUID	}
		{	RequestID	LLUUID	}
		{	TotalPairs	U32		}
	}
	{
		MemberData		Variable
		{	RoleID		LLUUID	}
		{	MemberID	LLUUID	}
	}
}

// GroupTitlesRequest
// viewer -> simulator -> dataserver
{
	GroupTitlesRequest Low	375 NotTrusted	Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
		{	GroupID		LLUUID	}
		{	RequestID	LLUUID	}
	}
}


// GroupTitlesReply
// dataserver -> simulator -> viewer
{
	GroupTitlesReply Low 376 Trusted	Zerocoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	GroupID		LLUUID	}
		{	RequestID	LLUUID	}
	}
	{
		GroupData	Variable
		{	Title		Variable	1	} // string
		{	RoleID		LLUUID			}
		{	Selected	BOOL			}
	}
}

// GroupTitleUpdate
// viewer -> simulator -> dataserver
{
	GroupTitleUpdate	Low	377 NotTrusted	Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
		{	GroupID		LLUUID	}
		{	TitleRoleID	LLUUID	}
	}
}

// GroupRoleUpdate
// viewer -> simulator -> dataserver
{
	GroupRoleUpdate		Low	378 NotTrusted	Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
		{	GroupID		LLUUID	}
	}
	{
		RoleData	Variable
		{	RoleID		LLUUID	}
		{	Name		Variable	1	}
		{	Description	Variable	1	}
		{	Title		Variable	1	}
		{	Powers		U64		}
		{	UpdateType	U8		}
	}
}
			
//-----------------------------------------------------------------------------
// Wearable messages
//-----------------------------------------------------------------------------

// AgentWearablesRequest
// (a.k.a. "Tell me what the avatar is wearing.")
// viewer -> simulator -> dataserver
// reliable
{
	AgentWearablesRequest Low 381 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
}

// AgentWearablesUpdate
// (a.k.a. "Here's what your avatar should be wearing now.")
// dataserver -> userserver -> viewer
// reliable
// NEVER from viewer to sim
{
	AgentWearablesUpdate Low 382 Trusted Zerocoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
		{	SerialNum	U32	}	// U32, Increases every time the wearables change for a given agent.  Used to avoid processing out of order packets.
	}
	{
		WearableData	Variable
		{	ItemID		LLUUID	}
		{	AssetID		LLUUID	}
		{	WearableType U8	}	// U8, LLWearable::EWearType
	}
}

//
// AgentIsNowWearing
// (a.k.a. "Here's what I'm wearing now.")
// viewer->sim->dataserver
// reliable
{
	AgentIsNowWearing	Low	383 NotTrusted	Zerocoded
	{
		AgentData Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		WearableData	Variable
		{	ItemID		LLUUID	}
		{	WearableType	U8	}
	}
}
		
// Request an AgentDataUpdate without changing any agent data.
{
	AgentDataUpdateRequest Low 386 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
}

// AgentDataUpdate
// Updates a viewer or simulator's impression of agent-specific information.
// Used, for example, when an agent's group changes.
// dataserver -> simulator -> viewer
// reliable
{
	AgentDataUpdate Low 387 Trusted Zerocoded
	{
		AgentData			Single
		{	AgentID				LLUUID	}
		{	FirstName	        Variable	1	}   // string
		{	LastName	        Variable	1	}   // string
		{	GroupTitle			Variable	1	}	// string
		{	ActiveGroupID		LLUUID	}	// active group
		{	GroupPowers			U64	}
		{	GroupName			Variable	1	}	// string
	}
}


// AgentGroupDataUpdate
// Updates a viewer or simulator's impression of the groups an agent is in. 
// dataserver -> simulator -> viewer
// reliable
{
	AgentGroupDataUpdate Low 389 Trusted Zerocoded UDPDeprecated
	{
		AgentData			Single
		{	AgentID				LLUUID	}
	}
	{
		GroupData			Variable
		{	GroupID				LLUUID	}
		{	GroupPowers			U64		}	
		{	AcceptNotices		BOOL	}
		{	GroupInsigniaID		LLUUID	}
		{	Contribution		S32		}
		{	GroupName			Variable	1	}	// string
	}
}

// AgentDropGroup
// Updates the viewer / simulator that an agent is no longer part of a group
// dataserver -> simulator -> viewer
// dataserver -> userserver
// reliable
{
	AgentDropGroup Low 390 Trusted Zerocoded UDPDeprecated
	{
		AgentData			Single
		{	AgentID				LLUUID	}
		{	GroupID				LLUUID	}
	}
}

{
	RezSingleAttachmentFromInv Low 395 NotTrusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}
	{
		ObjectData			Single
		{	ItemID			LLUUID	}
		{	OwnerID			LLUUID	}
		{	AttachmentPt	U8		}	// 0 for default
		{	ItemFlags		U32		}
		{	GroupMask		U32		}
		{	EveryoneMask	U32		}
		{	NextOwnerMask	U32		}
		{	Name			Variable	1	}
		{	Description		Variable	1	}
	}
}

{
	RezMultipleAttachmentsFromInv Low 396 NotTrusted Zerocoded
	{
		AgentData			Single
		{	AgentID			LLUUID	}
		{	SessionID		LLUUID	}
	}	
	{
		HeaderData			Single
		{	CompoundMsgID			LLUUID  }	// All messages a single "compound msg" must have the same id
		{	TotalObjects			U8	}
		{	FirstDetachAll			BOOL	}
	}
	{
		ObjectData			Variable		// 1 to 4 of these per packet
		{	ItemID					LLUUID	}
		{	OwnerID					LLUUID	}
		{	AttachmentPt			U8	}	// 0 for default
		{	ItemFlags				U32 }
		{	GroupMask				U32 }
		{	EveryoneMask			U32 }
		{	NextOwnerMask			U32	}
		{	Name					Variable	1	}
		{	Description				Variable	1	}
	}
}


{
	DetachAttachmentIntoInv Low 397 NotTrusted Unencoded
	{
		ObjectData			Single
		{	AgentID					LLUUID  }
		{	ItemID					LLUUID	}
	}
}


// Viewer -> Sim
// Used in "Make New Outfit"
{
	CreateNewOutfitAttachments  Low 398 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		HeaderData			Single
		{	NewFolderID			LLUUID	}
	}
	{
		ObjectData			Variable
		{	OldItemID			LLUUID	}
		{	OldFolderID			LLUUID	}
	}
}

//-----------------------------------------------------------------------------
// Personal information messages
//-----------------------------------------------------------------------------

{
	UserInfoRequest	Low	399 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
}

{
	UserInfoReply	Low	400 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID	LLUUID	}
	}
	{
		UserData	Single
		{	IMViaEMail	BOOL	}
		{	DirectoryVisibility	Variable 1	}
		{	EMail		Variable	2	}
	}
}

{
	UpdateUserInfo	Low	401 NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
		{	SessionID	LLUUID	}
	}
	{
		UserData	Single
		{	IMViaEMail	BOOL	}
		{	DirectoryVisibility	Variable 1	}
	}
}


//-----------------------------------------------------------------------------
// System operations and maintenance
//-----------------------------------------------------------------------------


// sim -> viewer
// initiate upload. primarily used for uploading raw files.
{
	InitiateDownload	Low	403 	NotTrusted Unencoded
	{
		AgentData	Single
		{	AgentID		LLUUID	}
	}
	{
		FileData	Single
		{	SimFilename		Variable	1	}	// string
		{	ViewerFilename	Variable	1	}	// string
	}
}

// Generalized system message. Each Requst has its own protocol for
// the StringData block format and contents.
{
    SystemMessage Low 404 Trusted Zerocoded
	{
		MethodData	 	Single
		{	Method		Variable 1	}
		{	Invoice		LLUUID		}
		{	Digest		Fixed 32	} // 32 hex digits == 1 MD5 Digest
	}
	{
		ParamList		Variable
		{	Parameter	Variable 1 }
	}
}

// ParcelMediaCommandMessage
// Sends a parcel media command
{
	ParcelMediaCommandMessage Low 419 Trusted Unencoded
	{
		CommandBlock Single
		{	Flags		U32	}
		{	Command		U32	}
		{	Time		F32	}
	}
}

// ParcelMediaUpdate
// Sends a parcel media update to a single user
// For global updates use the parcel manager.
{
	ParcelMediaUpdate Low 420 Trusted Unencoded
	{
		DataBlock Single
		{	MediaURL		Variable	1	}	// string
		{	MediaID			LLUUID			}
		{	MediaAutoScale	U8				}
	}
	{
		DataBlockExtended Single
		{   MediaType       Variable    1   }
		{   MediaDesc       Variable    1   }
		{   MediaWidth      S32             }
		{   MediaHeight     S32             }
		{   MediaLoop       U8              }
	}
}

// LandStatRequest
// Sent by the viewer to request collider/script information for a parcel
{
	LandStatRequest Low 421 NotTrusted Unencoded
	{
		AgentData		Single
		{	AgentID		LLUUID		}
		{	SessionID	LLUUID		}
	}
	{
		RequestData Single
		{	ReportType		U32				}
		{	RequestFlags	U32				}
		{	Filter			Variable	1	}
		{	ParcelLocalID	S32	}
	}
}

// LandStatReply
// Sent by the simulator in response to LandStatRequest
{
	LandStatReply Low 422 Trusted Unencoded UDPDeprecated
	{
		RequestData	Single
		{	ReportType			U32				}
		{	RequestFlags		U32				}
		{	TotalObjectCount	U32				}
	}
	{	
		ReportData	Variable
		{	TaskLocalID			U32				}
		{	TaskID				LLUUID			}
		{	LocationX			F32				}
		{	LocationY			F32				}
		{	LocationZ			F32				}
		{	Score				F32				}
		{	TaskName			Variable	1	}
		{	OwnerName			Variable	1	}
	}
}

// Generic Error -- this is used for sending an error message
// to a UDP recipient. The lowest common denominator is to at least
// log the message. More sophisticated receivers can do something
// smarter, for example, a money transaction failure can put up a 
// more user visible UI widget.
{
	Error Low 423 NotTrusted Zerocoded
	{
		AgentData Single
		{	AgentID		LLUUID	}				// will forward to agentid if coming from trusted circuit
	}
	{
		Data Single
		{	 Code		S32		}				// matches http status codes
		{	 Token		Variable	1	}		// some specific short string based message
		{	 ID			LLUUID	}				// the transactionid/uniqueid/sessionid whatever.
		{	 System		Variable	1	} 		// The hierarchical path to the system, eg, "message/handler"
		{	 Message	Variable	2	}		// Human readable message
		{	 Data		Variable	2	}		// Binary serialized LLSD for extra info.
	}
}

// RetrieveIMsExtended - extended version of RetrieveInstantMessages,
//  used to get instant messages that were persisted out to the database while the user was offline
//  sent between the simulator and dataserver
{
	RetrieveIMsExtended Low 427 Trusted Unencoded
	{
		AgentData 		Single
		{   AgentID     LLUUID  }
		{	SessionID	LLUUID	}
		{	IsPremium	BOOL	}
	}
}

